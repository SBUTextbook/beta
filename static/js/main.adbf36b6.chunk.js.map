{"version":3,"sources":["components/TextbookUploadForm.js","components/TextbookList.js","App.js","serviceWorker.js","index.js"],"names":["TextbookUploadForm","state","title","author","pages","description","edition","year","language","publisher","isbn","issn","courseDepartment","courseCode","file","Promise","resolve","reject","reader","FileReader","onloadend","e","wordArray","CryptoJS","lib","WordArray","create","result","MD5","toString","onerror","readAsArrayBuffer","preventDefault","formData","FormData","form","document","getElementById","append","files","this","getMd5","md5","body","axios","get","status","console","log","books","data","textbooks","method","url","Qs","stringify","headers","auth","username","password","then","response","a","includes","alert","catch","style","margin","onSubmit","event","formSubmit","id","type","label","onChange","setState","target","value","placeholder","required","variant","React","Component","columns","name","LibgenLinkFormatter","href","LibgenLinkProvider","props","formatterComponent","TextbookList","search","loaded","res","map","textbook","course","toUpperCase","Button","backgroundColor","Autocomplete","options","sort","renderInput","params","TextField","Paper","rows","filter","approved","defaultSorting","columnName","direction","for","App","basename","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6pBAMqBA,E,4MACjBC,MAAQ,CACJC,MAAO,GACPC,OAAQ,GACRC,MAAO,GACPC,YAAa,GACbC,QAAS,GACTC,KAAM,GACNC,SAAU,GACVC,UAAW,GACXC,KAAM,GACNC,KAAM,GACNC,iBAAkB,GAClBC,WAAY,I,8FAGHC,G,0FACF,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAClB,IAAIC,EAAYC,IAASC,IAAIC,UAAUC,OAAOR,EAAOS,QACrDX,EAAQO,IAASK,IAAIN,GAAWO,aAElCX,EAAOY,QAAU,SAACT,GAChBJ,EAAOI,IAETH,EAAOa,kBAAkBjB,O,4KAIdO,G,oHACbA,EAAEW,iBACIC,EAAW,IAAIC,SACfC,EAAOC,SAASC,eAAe,QACrCJ,EAASK,OAAO,OAAQH,EAAKI,MAAM,I,SAEjBC,KAAKC,OAAON,EAAKI,MAAM,I,cAAnCG,E,SAEsHF,KAAKvC,MAAzHC,E,EAAAA,MAAOC,E,EAAAA,OAAQC,E,EAAAA,MAAOC,E,EAAAA,YAAaC,E,EAAAA,QAASC,E,EAAAA,KAAME,E,EAAAA,UAAWC,E,EAAAA,KAAMC,E,EAAAA,KAAMC,E,EAAAA,iBAAkBC,E,EAAAA,WAAYL,E,EAAAA,SAE3GmC,EAAO,CAAEzC,QAAOC,SAAQC,QAAOC,cAAaC,UAASC,OAAME,YAAWC,OAAMC,OAAMC,mBAAkBC,aAAYL,Y,mBAGzFoC,IAAMC,IAAN,uFAA0FH,I,WACzF,M,OAAXI,O,wBACTC,QAAQC,IAAI,sB,UACQJ,IAAMC,IAAI,4C,QAAxBI,E,qBACaA,EAAMC,KAAKC,W,sEACjBT,MAAQA,E,mMAIrBC,EAAO,CAAEzC,QAAOC,SAAQC,QAAOC,cAAaC,UAASC,OAAME,YAAWC,OAAMC,OAAMC,mBAAkBC,aAAYL,WAAUkC,O,UACpHE,IAAM,CACRQ,OAAQ,OACRC,IAAK,4CACLH,KAAMI,IAAGC,UAAUZ,K,4FAK3BI,QAAQC,IAAI,uC,QAGhBJ,IAAM,CACFQ,OAAQ,OACRC,IAAK,sEACLH,KAAMjB,EACNuB,QAAS,CAAE,eAAgB,uBAC3BC,KAAM,CAAEC,SAAU,UAAWC,SAAU,YAEtCC,MAAK,SAACC,GACH,IAAIR,EAAMQ,EAASL,QAAQ,eAC3BH,EAAG,8CAA0CA,GAC7CT,IAAM,CACFS,MACAD,OAAQ,OACRK,KAAM,CAAEC,SAAU,UAAWC,SAAU,UACvCT,KAAMI,IAAGC,UAAUZ,KAEtBiB,KAND,+BAAAE,EAAA,MAMM,WAAOD,GAAP,SAAAC,EAAA,0DACED,EAASX,KAAKrB,WAAWkC,SAAS,4CAA+CF,EAASX,KAAKrB,WAAWkC,SAAS,mEADrH,gBAEEC,MAAM,kBAFR,6BAIErB,EAAO,CAAEzC,QAAOC,SAAQC,QAAOC,cAAaC,UAASC,OAAME,YAAWC,OAAMC,OAAMC,mBAAkBC,aAAYL,WAAUkC,OAJ5H,SAKQE,IAAM,CACRQ,OAAQ,OACRC,IAAK,4CACLH,KAAMI,IAAGC,UAAUZ,KARzB,2CANN,0DAmBHsB,OAAM,SAACJ,GACJd,QAAQC,IAAIa,M,8JAId,IAAD,OACL,OACI,yBAAKK,MAAO,CAACC,OAAQ,QACjB,kBAAC,OAAD,CAAMC,SAAU,SAAAC,GAAK,OAAI,EAAKC,WAAWD,KACrC,qDACA,kBAAC,QAAD,CAAOE,GAAG,OAAOC,KAAK,SACtB,kBAAC,QAAD,CAAOC,MAAM,SAASC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAACzE,MAAOmB,EAAEuD,OAAOC,SAASC,YAAY,QAAQC,UAAU,IAC3G,kBAAC,QAAD,CAAON,MAAM,UAAUC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAACxE,OAAQkB,EAAEuD,OAAOC,SAASC,YAAY,SAASC,UAAU,IAC9G,kBAAC,QAAD,CAAON,MAAM,aAAaC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAACvE,MAAOiB,EAAEuD,OAAOC,SAASC,YAAY,eAC7F,kBAAC,WAAD,CAAUL,MAAM,cAAcC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAACtE,YAAagB,EAAEuD,OAAOC,SAASC,YAAY,2BACvG,kBAAC,QAAD,CAAOL,MAAM,WAAWC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAACrE,QAASe,EAAEuD,OAAOC,SAASC,YAAY,0BAA0BC,UAAU,IACjI,kBAAC,QAAD,CAAON,MAAM,YAAYC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAACnE,SAAUa,EAAEuD,OAAOC,SAASC,YAAY,WAAWC,UAAU,IACpH,kBAAC,QAAD,CAAON,MAAM,eAAeC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAACpE,KAAMc,EAAEuD,OAAOC,SAASC,YAAY,iBAC9F,kBAAC,QAAD,CAAOL,MAAM,YAAYC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAAClE,UAAWY,EAAEuD,OAAOC,SAASC,YAAY,cAChG,kBAAC,QAAD,CAAOL,MAAM,QAAQC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAACjE,KAAMW,EAAEuD,OAAOC,SAASC,YAAY,OAAOC,UAAU,IACxG,kBAAC,QAAD,CAAON,MAAM,OAAOC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAAChE,KAAMU,EAAEuD,OAAOC,SAASC,YAAY,SACtF,kBAAC,QAAD,CAAOL,MAAM,oBAAoBC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAAC/D,iBAAkBS,EAAEuD,OAAOC,SAASC,YAAY,0BAA0BC,UAAU,IACnJ,kBAAC,QAAD,CAAON,MAAM,cAAcC,SAAU,SAAArD,GAAC,OAAI,EAAKsD,SAAS,CAAC9D,WAAYQ,EAAEuD,OAAOC,SAASC,YAAY,qBAAqBC,UAAU,IAClI,kBAAC,SAAD,CAAQC,QAAQ,UAAhB,gB,GApH4BC,IAAMC,WCIhDC,EAAU,CACZ,CAAEC,KAAM,SAAUlF,MAAO,UACzB,CAAEkF,KAAM,WAAYlF,MAAO,YAC3B,CAAEkF,KAAM,WAAYlF,MAAO,aAGzBmF,EAAsB,SAAC,GAAe,IAAbR,EAAY,EAAZA,MAC3B,OACI,8BACI,uBAAGS,KAAI,mDAA8CT,IAArD,eAKNU,EAAqB,SAAAC,GAAK,OAC9B,kBAAC,IAAD,eACEC,mBAAoBJ,GAChBG,KAIaE,E,4MACjBzF,MAAQ,CACJkD,UAAW,GACXwC,OAAQ,GACRC,QAAQ,G,wLAKI,2C,SACMhD,IAAMC,IADZ,4C,OACNgD,E,OACNrD,KAAKmC,SAAS,CACVxB,UAAW0C,EAAI3C,KAAKC,UAAU2C,KAAI,SAACC,GAC/B,MAAO,CACHC,OAAQD,EAASC,OAAOC,cACxBF,SAAS,GAAD,OAAKA,EAAS7F,MAAd,aAAwB6F,EAASzF,QAAjC,sDACKyF,EAAS5F,QACtBuC,IAAKqD,EAASrD,UAI1BF,KAAKmC,SAAS,CAAEiB,QAAQ,I,qIAElB,IAAD,OACL,OAAKpD,KAAKvC,MAAM2F,OAIZ,yBAAK1B,MAAO,CAACC,OAAQ,QACjB,uBAAGmB,KAAK,kDAAiD,kBAACY,EAAA,EAAD,CAAQhC,MAAO,CAACiC,gBAAgB,SAAhC,WACzD,6BACA,kBAACC,EAAA,EAAD,CACIC,QAAS7D,KAAKvC,MAAMkD,UAAU2C,KAAI,SAAAC,GAAQ,OAAIA,EAASC,UAAQM,OAC/DC,YAAa,SAACC,GAAD,OAAY,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuB/B,MAAM,SAASO,QAAQ,WACvEN,SAAU,SAAAL,GAAK,OAAI,EAAKM,SAAS,CAAEgB,OAAQtB,EAAMO,OAAOC,eAG5D,kBAAC6B,EAAA,EAAD,KACI,kBAAC,IAAD,CAAMC,KAAMnE,KAAKvC,MAAMkD,UAAUyD,QAAO,SAAAb,GAAQ,OAAKA,EAASc,UAAYd,EAASC,OAAOjC,SAAS,EAAK9D,MAAM0F,OAAOM,kBAAiBd,QAASA,GAC3I,kBAAC,IAAD,CAAc2B,eAAgB,CAAC,CAAEC,WAAY,SAAUC,UAAW,UAClE,kBAAC,IAAD,MACA,kBAAC,EAAD,CAAoBC,IAAK,CAAC,SAC1B,kBAAC,IAAD,MACA,kBAAC,IAAD,SAlBL,gD,GAzBuBhC,IAAMC,WCdjCgC,MAXf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7B,IACjC,kBAAC,IAAD,CAAO4B,KAAK,UAAUC,UAAWvH,OCCrBwH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3F,SAASC,eAAe,SDyHpB,kBAAmB2F,WACrBA,UAAUC,cAAcC,MACrBtE,MAAK,SAAAuE,GACJA,EAAaC,gBAEdnE,OAAM,SAAAoE,GACLtF,QAAQsF,MAAMA,EAAMC,c","file":"static/js/main.adbf36b6.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Button, Form, Input, Textarea } from 'muicss/react';\nimport Qs from 'qs';\nimport CryptoJS from 'crypto-js';\n\nexport default class TextbookUploadForm extends React.Component {\n    state = {\n        title: '',\n        author: '',\n        pages: '',\n        description: '',\n        edition: '',\n        year: '',\n        language: '',\n        publisher: '',\n        isbn: '',\n        issn: '',\n        courseDepartment: '',\n        courseCode: '',\n    };\n\n    async getMd5(file) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onloadend = (e) => {\n            var wordArray = CryptoJS.lib.WordArray.create(reader.result);\n            resolve(CryptoJS.MD5(wordArray).toString());\n          };\n          reader.onerror = (e) => {\n            reject(e);\n          };\n          reader.readAsArrayBuffer(file);\n        });\n      }\n\n    async formSubmit(e) {\n        e.preventDefault();\n        const formData = new FormData();\n        const form = document.getElementById('file');\n        formData.append(\"file\", form.files[0]);\n\n        const md5 = await this.getMd5(form.files[0]);\n\n        const { title, author, pages, description, edition, year, publisher, isbn, issn, courseDepartment, courseCode, language } = this.state;\n\n        let body = { title, author, pages, description, edition, year, publisher, isbn, issn, courseDepartment, courseCode, language };\n\n        try {\n            const response = await axios.get(`https://cors-anywhere.herokuapp.com/http://gen.lib.rus.ec/book/index.php?md5=${md5}`);\n            if (response.status === 200) {\n                console.log(\"Already on libgen.\");\n                const books = await axios.get('https://sbutextbooks.herokuapp.com/books');\n                for (const book of books.data.textbooks) {\n                    if (book.md5 === md5) {\n                        return;\n                    } \n                }\n                body = { title, author, pages, description, edition, year, publisher, isbn, issn, courseDepartment, courseCode, language, md5 };\n                await axios({\n                    method: 'POST',\n                    url: 'https://sbutextbooks.herokuapp.com/upload',\n                    data: Qs.stringify(body),\n                });\n                return;\n            }\n        } catch(err) {\n            console.log('not found on libgen... uploading...');\n        }\n\n        axios({\n            method: 'POST',\n            url: 'https://cors-anywhere.herokuapp.com/https://library.bz/main/upload/',\n            data: formData,\n            headers: { 'Content-Type': 'multipart/form-data' },\n            auth: { username: 'genesis', password: 'upload' },\n            })\n            .then((response) => {\n                let url = response.headers['x-final-url'];\n                url = `https://cors-anywhere.herokuapp.com/${url}`;\n                axios({\n                    url,\n                    method: 'POST',\n                    auth: { username: 'genesis', password: 'upload' },\n                    data: Qs.stringify(body),\n                })\n                .then(async (response) => {\n                    if (response.data.toString().includes('The record has been successfully saved.') && !response.data.toString().includes('The file is already in the upload queue and awaiting moderation')) {\n                        alert('Upload failed!');\n                    } else {\n                        body = { title, author, pages, description, edition, year, publisher, isbn, issn, courseDepartment, courseCode, language, md5 };\n                        await axios({\n                            method: 'POST',\n                            url: 'https://sbutextbooks.herokuapp.com/upload',\n                            data: Qs.stringify(body),\n                        });\n                    }\n                });\n            })\n            .catch((response) => {\n                console.log(response);\n            });\n    }\n\n    render() {\n        return (\n            <div style={{margin: '2em'}}>\n                <Form onSubmit={event => this.formSubmit(event)}>\n                    <legend>Upload a Textbook</legend>\n                    <Input id=\"file\" type=\"file\" />\n                    <Input label=\"Title*\" onChange={e => this.setState({title: e.target.value})} placeholder=\"Title\" required={true} />\n                    <Input label=\"Author*\" onChange={e => this.setState({author: e.target.value})} placeholder=\"Author\" required={true} />\n                    <Input label=\"Page Count\" onChange={e => this.setState({pages: e.target.value})} placeholder=\"Page Count\" />\n                    <Textarea label=\"Description\" onChange={e => this.setState({description: e.target.value})} placeholder=\"Description (optional)\" />\n                    <Input label=\"Edition*\" onChange={e => this.setState({edition: e.target.value})} placeholder=\"ex. 1st, 2nd, 5th, etc.\" required={true} />\n                    <Input label=\"Language*\" onChange={e => this.setState({language: e.target.value})} placeholder=\"Language\" required={true} />\n                    <Input label=\"Release Year\" onChange={e => this.setState({year: e.target.value})} placeholder=\"Release Year\" />\n                    <Input label=\"Publisher\" onChange={e => this.setState({publisher: e.target.value})} placeholder=\"Publisher\" />\n                    <Input label=\"ISBN*\" onChange={e => this.setState({isbn: e.target.value})} placeholder=\"ISBN\" required={true} />\n                    <Input label=\"ISSN\" onChange={e => this.setState({issn: e.target.value})} placeholder=\"ISSN\" />\n                    <Input label=\"Course Department\" onChange={e => this.setState({courseDepartment: e.target.value})} placeholder=\"ex. AMS, CSE, BIO, etc.\" required={true} />\n                    <Input label=\"Course Code\" onChange={e => this.setState({courseCode: e.target.value})} placeholder=\"ex. 101, 300, etc.\" required={true} />\n                    <Button variant=\"raised\">Submit</Button>\n                </Form>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { Grid, Table, TableHeaderRow, TableFilterRow } from '@devexpress/dx-react-grid-material-ui';\nimport { DataTypeProvider, SortingState, IntegratedSorting, FilteringState, IntegratedFiltering } from '@devexpress/dx-react-grid';\nimport axios from 'axios';\nimport TextbookUploadForm from './TextbookUploadForm';\n\nconst columns = [\n    { name: 'course', title: 'Course' },\n    { name: 'textbook', title: 'Textbook' },\n    { name: 'linkInfo', title: 'Download' },\n];\n\nconst LibgenLinkFormatter = ({ value }) => {\n    return (\n        <span>\n            <a href={`http://gen.lib.rus.ec/book/index.php?md5=${value}`}>Download </a>\n        </span>\n    );\n} \n\nconst LibgenLinkProvider = props => (\n  <DataTypeProvider\n    formatterComponent={LibgenLinkFormatter}\n    {...props}\n  />\n);\n\nexport default class TextbookList extends React.Component {\n    state = {\n        textbooks: [],\n        search: '',\n        loaded: false,\n    };\n\n    async componentDidMount() {\n        \n        const url = 'https://sbutextbooks.herokuapp.com/books';\n        const res = await axios.get(url);\n        this.setState({\n            textbooks: res.data.textbooks.map((textbook) => {\n                return {\n                    course: textbook.course.toUpperCase(),\n                    textbook: `${textbook.title} (${textbook.edition} edition),\n                               ${textbook.author}`,\n                    md5: textbook.md5,\n                };\n            })\n        });\n        this.setState({ loaded: true });\n    }\n    render() {\n        if (!this.state.loaded) {\n            return <span>Loading...</span>\n        }\n        return (\n            <div style={{margin: '2em'}}>\n                <a href='https://sbutextbook.github.io/client/#/upload/'><Button style={{backgroundColor:'grey'}}>Upload</Button></a>\n                <hr />\n                <Autocomplete\n                    options={this.state.textbooks.map(textbook => textbook.course).sort()}\n                    renderInput={(params) => <TextField {...params} label=\"Course\" variant=\"outlined\" \n                    onChange={event => this.setState({ search: event.target.value })}\n                    />}\n                />\n                <Paper>\n                    <Grid rows={this.state.textbooks.filter(textbook => !textbook.approved && textbook.course.includes(this.state.search.toUpperCase()))} columns={columns}>\n                        <SortingState defaultSorting={[{ columnName: 'course', direction: 'asc' }]} />\n                        <IntegratedSorting />\n                        <LibgenLinkProvider for={['md5']} />\n                        <Table />\n                        <TableHeaderRow />\n                    </Grid>\n                </Paper>\n            </div>\n        )\n    }\n}","import React from 'react';\n// import { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport TextbookList from './components/TextbookList';\nimport TextbookUploadForm from './components/TextbookUploadForm';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={TextbookList} />\n        <Route path=\"/upload\" component={TextbookUploadForm} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}