{"version":3,"sources":["components/TextbookList.js","components/TextbookUploadForm.js","App.js","serviceWorker.js","index.js"],"names":["columns","name","title","LibgenLinkFormatter","value","href","LibgenLinkProvider","props","formatterComponent","TextbookList","state","textbooks","search","loaded","axios","get","res","this","setState","data","map","textbook","course","toUpperCase","substring","edition","author","md5","approved","style","margin","Button","backgroundColor","Autocomplete","options","sort","renderInput","params","TextField","label","variant","onChange","event","target","Paper","rows","filter","includes","defaultSorting","columnName","direction","for","defaultColumnWidths","width","React","Component","TextbookUploadForm","pages","description","year","language","publisher","isbn","issn","courseDepartment","courseCode","libgenLink","file","Promise","resolve","reject","reader","FileReader","onloadend","e","wordArray","CryptoJS","lib","WordArray","create","result","MD5","toString","onerror","readAsArrayBuffer","preventDefault","form","document","getElementById","formData","FormData","files","append","getMd5","indexOf","alert","body","status","console","log","books","book","method","url","Qs","stringify","headers","auth","username","password","then","response","a","catch","onSubmit","formSubmit","id","type","required","placeholder","App","basename","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ef1d0b0e.chunk.js","sourcesContent":["import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { Grid, Table, TableHeaderRow, TableColumnResizing } from '@devexpress/dx-react-grid-material-ui';\nimport { DataTypeProvider, SortingState, IntegratedSorting } from '@devexpress/dx-react-grid';\nimport axios from 'axios';\n\nconst columns = [\n    { name: 'course', title: 'Course' },\n    { name: 'textbook', title: 'Textbook' },\n    { name: 'md5', title: 'Download' },\n];\n\nconst LibgenLinkFormatter = ({ value }) => {\n    return (\n        <span>\n            <a href={`http://gen.lib.rus.ec/book/index.php?md5=${value}`}>Download </a>\n        </span>\n    );\n} \n\nconst LibgenLinkProvider = props => (\n  <DataTypeProvider\n    formatterComponent={LibgenLinkFormatter}\n    {...props}\n  />\n);\n\nexport default class TextbookList extends React.Component {\n    state = {\n        textbooks: [],\n        search: '',\n        loaded: false,\n    };\n\n    async componentDidMount() {\n        \n        const url = 'https://sbutextbooks.herokuapp.com/books';\n        const res = await axios.get(url);\n        this.setState({\n            textbooks: res.data.textbooks.map((textbook) => {\n                return {\n                    course: `${textbook.course.toUpperCase().substring(0, 3)} ${textbook.course.substring(3)}`,\n                    textbook: `${textbook.title} (${textbook.edition} edition),\n                               ${textbook.author}`,\n                    md5: textbook.md5,\n                    approved: textbook.approved,\n                };\n            })\n        });\n        this.setState({ loaded: true });\n    }\n    render() {\n        if (!this.state.loaded) {\n            return <span>Loading...</span>\n        }\n        return (\n            <div style={{margin: '2em'}}>\n                <a href='https://sbutextbook.github.io/beta/#/upload/'><Button style={{backgroundColor:'grey'}}>Upload</Button></a>\n                <hr />\n                <Autocomplete\n                    options={this.state.textbooks.map(textbook => textbook.course).sort()}\n                    renderInput={(params) => <TextField {...params} label=\"Course\" variant=\"outlined\" \n                    onChange={event => this.setState({ search: event.target.value })}\n                    />}\n                />\n                <Paper>\n                    <Grid rows={this.state.textbooks.filter(textbook => textbook.approved && textbook.course.includes(this.state.search.toUpperCase()))} columns={columns}>\n                        <SortingState defaultSorting={[{ columnName: 'course', direction: 'asc' }]} />\n                        <IntegratedSorting />\n                        <LibgenLinkProvider for={['md5']} />\n                        <Table />\n                        <TableColumnResizing defaultColumnWidths={[\n                            { columnName: 'course', width: 180 },\n                            { columnName: 'textbook', width: 1200 },\n                            { columnName: 'md5', width: 180 },\n                            ]} />\n                        <TableHeaderRow />\n                    </Grid>\n                </Paper>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport { Button, Form, Input, Textarea } from 'muicss/react';\nimport Qs from 'qs';\nimport CryptoJS from 'crypto-js';\n\nexport default class TextbookUploadForm extends React.Component {\n    state = {\n        title: '',\n        author: '',\n        pages: '',\n        description: '',\n        edition: '',\n        year: '',\n        language: '',\n        publisher: '',\n        isbn: '',\n        issn: '',\n        courseDepartment: '',\n        courseCode: '',\n        libgenLink: '',\n    };\n\n    async getMd5(file) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onloadend = (e) => {\n            var wordArray = CryptoJS.lib.WordArray.create(reader.result);\n            resolve(CryptoJS.MD5(wordArray).toString());\n          };\n          reader.onerror = (e) => {\n            reject(e);\n          };\n          reader.readAsArrayBuffer(file);\n        });\n      }\n\n    async formSubmit(e) {\n        e.preventDefault();\n        const form = document.getElementById('file');\n        let md5;\n        const formData = new FormData();\n\n        if (form.files[0]) {\n            formData.append(\"file\", form.files[0]);\n            md5 = await this.getMd5(form.files[0]);\n        } else {\n            if (this.state.libgenLink.includes('/book/index.php?md5=')) {\n                md5 = this.state.libgenLink.substring(this.state.libgenLink.indexOf('md5=') + 4);\n            } else {\n                alert('Invalid libgen link provided!');\n                return;\n            }\n        }\n\n        const { title, author, pages, description, edition, year, publisher, isbn, issn, courseDepartment, courseCode, language } = this.state;\n\n        let body = { title, author, pages, description, edition, year, publisher, isbn, issn, courseDepartment, courseCode, language };\n\n        try {\n            const response = await axios.get(`https://cors-anywhere.herokuapp.com/http://gen.lib.rus.ec/book/index.php?md5=${md5}`);\n            if (response.status === 200) {\n                console.log(\"Already on libgen.\");\n                const books = await axios.get('https://sbutextbooks.herokuapp.com/books');\n                for (const book of books.data.textbooks) {\n                    if (book.md5 === md5 && book.courseDepartment === courseDepartment && book.courseCode === courseCode) {\n                        return;\n                    }\n                }\n                body = { title, author, pages, description, edition, year, publisher, isbn, issn, courseDepartment, courseCode, language, md5 };\n                try {\n                    await axios({\n                        method: 'POST',\n                        url: 'https://sbutextbooks.herokuapp.com/upload',\n                        data: Qs.stringify(body),\n                    });\n                    alert('Upload complete.')\n                } catch(err) {\n                    alert(`Upload failed! ${err}`)\n                }\n                return;\n            }\n        } catch(err) {\n            console.log('not found on libgen... uploading...');\n        }\n\n        axios({\n            method: 'POST',\n            url: 'https://cors-anywhere.herokuapp.com/https://library.bz/main/upload/',\n            data: formData,\n            headers: { 'Content-Type': 'multipart/form-data' },\n            auth: { username: 'genesis', password: 'upload' },\n            })\n            .then((response) => {\n                let url = response.headers['x-final-url'];\n                url = `https://cors-anywhere.herokuapp.com/${url}`;\n                axios({\n                    url,\n                    method: 'POST',\n                    auth: { username: 'genesis', password: 'upload' },\n                    data: Qs.stringify(body),\n                })\n                .then(async (response) => {\n                    if (!response.data.toString().includes('The record has been successfully saved.') && response.data.toString().includes('The file is already in the upload queue and awaiting moderation')) {\n                        alert('File already uploaded and awaiting moderation.');\n                        return;\n                    } else {\n                        body = { title, author, pages, description, edition, year, publisher, isbn, issn, courseDepartment, courseCode, language, md5 };\n                        try {\n                            await axios({\n                                method: 'POST',\n                                url: 'https://sbutextbooks.herokuapp.com/upload',\n                                data: Qs.stringify(body),\n                            });\n                            alert('Upload successful!');\n                        } catch(err) {\n                            alert(`Upload failed, server error ${err}`);\n                        }\n                        return;\n                    }\n                });\n            })\n            .catch((response) => {\n                alert(response);\n            });\n    }\n\n    render() {\n        return (\n            <div style={{margin: '2em'}}>\n                <Form onSubmit={event => this.formSubmit(event)}>\n                    <legend>Upload a Textbook</legend>\n                    <Input id=\"file\" type=\"file\" required={!this.state.libgenLink} />\n                    <Input label=\"Libgen Link*\" onChange={e => this.setState({libgenLink: e.target.value})} placeholder=\"LibGen Link\" />\n                    <Input label=\"Title*\" onChange={e => this.setState({title: e.target.value})} placeholder=\"Title\" required={true} />\n                    <Input label=\"Author*\" onChange={e => this.setState({author: e.target.value})} placeholder=\"Author\" required={true} />\n                    <Input label=\"Page Count\" onChange={e => this.setState({pages: e.target.value})} placeholder=\"Page Count\" />\n                    <Textarea label=\"Description\" onChange={e => this.setState({description: e.target.value})} placeholder=\"Description (optional)\" />\n                    <Input label=\"Edition*\" onChange={e => this.setState({edition: e.target.value})} placeholder=\"ex. 1st, 2nd, 5th, etc.\" required={true} />\n                    <Input label=\"Language*\" onChange={e => this.setState({language: e.target.value})} placeholder=\"Language\" required={true} />\n                    <Input label=\"Release Year\" onChange={e => this.setState({year: e.target.value})} placeholder=\"Release Year\" />\n                    <Input label=\"Publisher\" onChange={e => this.setState({publisher: e.target.value})} placeholder=\"Publisher\" />\n                    <Input label=\"ISBN*\" onChange={e => this.setState({isbn: e.target.value})} placeholder=\"ISBN\" required={true} />\n                    <Input label=\"ISSN\" onChange={e => this.setState({issn: e.target.value})} placeholder=\"ISSN\" />\n                    <Input label=\"Course Department\" onChange={e => this.setState({courseDepartment: e.target.value})} placeholder=\"ex. AMS, CSE, BIO, etc.\" required={true} />\n                    <Input label=\"Course Code\" onChange={e => this.setState({courseCode: e.target.value})} placeholder=\"ex. 101, 300, etc.\" required={true} />\n                    <Button variant=\"raised\">Submit</Button>\n                </Form>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n// import { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport TextbookList from './components/TextbookList';\nimport TextbookUploadForm from './components/TextbookUploadForm';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={TextbookList} />\n        <Route path=\"/upload\" component={TextbookUploadForm} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}